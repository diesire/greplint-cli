{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKqB;AACnB,WADmB,GACnB,GAAc;;;0BADK,KACL;;AACZ,SAAK,QAAL,uBADY;AAEZ,SAAK,QAAL,CAAc,OAAd,MAAyB,kBAAK,OAAL,CAAzB,CACG,WADH,MACkB,kBAAK,WAAL,CADlB,CAEG,KAFH,WAGG,MAHH,CAGU,gBAHV,EAG4B,mBAH5B,EAIG,MAJH,CAIU,wBAJV,EAIoC,iBAJpC,EAKG,MALH,CAKU,gBAAQ;AACd,aAAO,uBAAa,IAAb,EAAmB,EAAC,SAAS,MAAK,QAAL,CAAc,OAAd,EAA7B,EAAqD,IAArD,CAA0D,MAAK,QAAL,CAAc,UAAd,CAA1D,CACJ,IADI,CACC,kBAAU;AACd,eAAO,OAAP,CAAe;iBAAS,MAAK,WAAL,CAAiB,KAAjB;SAAT,CAAf,CADc;AAEd,eAAO,CAAP,CAFc;OAAV,OADD,EAKJ,KALI,CAKE,eAAO;AACZ,gBAAQ,GAAR,CAAY,GAAZ,EADY;AAEZ,eAAO,CAAC,CAAD,CAFK;OAAP,CALT,CADc;KAAR,CALV,CAFY;GAAd;;eADmB;;gCAqBP,OAAO;AACjB,UAAM,QAAQ,IAAI,gBAAM,WAAN,CAAkB,EAAC,SAAS,KAAK,QAAL,CAAc,KAAd,GAAsB,IAAtB,GAA6B,KAA7B,EAAhC,CAAR,CADW;AAEjB,UAAM,WAAW,MAAM,GAAN,CAAa,MAAM,QAAN,MAAb,CAAX,CAFW;AAGjB,UAAM,UAAU,MAAM,KAAN,WAAoB,MAAM,UAAN,cAAyB,MAAM,KAAN,MAA7C,CAAV,CAHW;AAIjB,UAAM,SAAS,MAAM,KAAN,MAAe,MAAM,KAAN,CAAxB,CAJW;;AAMjB,cAAQ,GAAR,CAAY,QAAZ,EAAsB,OAAtB,EAA+B,MAA/B,EANiB;;;;wBASf,MAAM;AACR,UAAI,KAAK,MAAL,GAAc,CAAd,EAAiB;AACnB,gBAAQ,GAAR,CAAY,eAAZ,EADmB;AAEnB,eAFmB;OAArB;AAIA,UAAI,KAAK,MAAL,KAAgB,CAAhB,EAAmB;AACrB,aAAK,QAAL,CAAc,IAAd,GADqB;OAAvB;AAGA,WAAK,QAAL,CAAc,KAAd,CAAoB,IAApB,EARQ;;;;SA9BS","file":"cli.js","sourcesContent":["import commander from 'commander'\nimport Chalk from 'chalk'\nimport Greplint from 'greplint'\nimport pack from '../package.json'\n\nexport default class Cli {\n  constructor() {\n    this._program = commander\n    this._program.version(`${pack.version}`)\n      .description(`${pack.description}`)\n      .usage(`<path>`)\n      .option('-C, --no-color', 'Uncolorize output')\n      .option('-e, --expression <exp>', 'Grep expression')\n      .action(path => {\n        return new Greplint(path, {verbose: this._program.verbose}).lint(this._program.expression)\n          .then(values => {\n            values.forEach(value => this.prettyprint(value))\n            return 0\n          }, this)\n          .catch(err => {\n            console.log(err)\n            return -1\n          })\n      })\n  }\n\n  prettyprint(found) {\n    const chalk = new Chalk.constructor({enabled: this._program.color ? true : false})\n    const filename = chalk.red(`${found.filename}:`)\n    const lineCol = chalk.green(`line ${found.lineNumber}, col ${found.index},`)\n    const source = chalk.white(`${found.value}`)\n\n    console.log(filename, lineCol, source)\n  }\n\n  run(args) {\n    if (args.length < 2) {\n      console.log('Few arguments')\n      return\n    }\n    if (args.length === 2) {\n      this._program.help()\n    }\n    this._program.parse(args)\n  }\n}\n"]}