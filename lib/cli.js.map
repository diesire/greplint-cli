{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqB;AACnB,WADmB,GACnB,GAAc;;;0BADK,KACL;;AACZ,SAAK,QAAL,uBADY;AAEZ,SAAK,QAAL,CAAc,OAAd,MAAyB,kBAAK,OAAL,CAAzB,CACG,WADH,MACkB,kBAAK,WAAL,CADlB,CAEG,KAFH,WAGG,MAHH,CAGU,gBAHV,EAG4B,mBAH5B,EAIG,MAJH,CAIU,wBAJV,EAIoC,iBAJpC,EAKG,MALH,CAKU,gBAAQ;AACd,aAAO,uBAAa,IAAb,EAAmB,EAAC,SAAS,MAAK,QAAL,CAAc,OAAd,EAA7B,EAAqD,IAArD,CAA0D,MAAK,QAAL,CAAc,UAAd,CAA1D,CACJ,IADI,CACC,kBAAU;AACd,eAAO,OAAP,CAAe;iBAAS,MAAK,WAAL,CAAiB,KAAjB;SAAT,CAAf,CADc;AAEd,eAAO,CAAP,CAFc;OAAV,OADD,EAKJ,KALI,CAKE,eAAO;AACZ,gBAAQ,GAAR,CAAY,GAAZ,EADY;AAEZ,eAAO,CAAC,CAAD,CAFK;OAAP,CALT,CADc;KAAR,CALV,CAFY;GAAd;;eADmB;;gCAqBP,OAAO;AACjB,UAAM,QAAQ,IAAI,gBAAM,WAAN,CAAkB,EAAC,SAAS,KAAK,QAAL,CAAc,KAAd,GAAsB,IAAtB,GAA6B,KAA7B,EAAhC,CAAR,CADW;AAEjB,UAAM,WAAW,MAAM,GAAN,CAAa,MAAM,QAAN,MAAb,CAAX,CAFW;AAGjB,UAAM,UAAU,MAAM,KAAN,WAAoB,MAAM,UAAN,cAAyB,MAAM,KAAN,MAA7C,CAAV,CAHW;AAIjB,UAAM,SAAS,MAAM,KAAN,MAAe,MAAM,KAAN,CAAxB,CAJW;;AAMjB,cAAQ,GAAR,CAAY,QAAZ,EAAsB,OAAtB,EAA+B,MAA/B,EANiB;;;;wBASf,MAAM;AACR,UAAI,KAAK,MAAL,GAAc,CAAd,EAAiB;AACnB,gBAAQ,GAAR,CAAY,eAAZ,EADmB;AAEnB,eAFmB;OAArB;AAIA,UAAI,KAAK,MAAL,KAAgB,CAAhB,EAAmB;AACrB,aAAK,QAAL,CAAc,IAAd,GADqB;OAAvB;AAGA,WAAK,QAAL,CAAc,KAAd,CAAoB,IAApB,EARQ;;;;SA9BS","file":"cli.js","sourcesContent":["import commander from 'commander'\r\nimport Chalk from 'chalk'\r\nimport Greplint from 'greplint'\r\nimport pack from '../package.json'\r\n\r\nexport default class Cli {\r\n  constructor() {\r\n    this._program = commander\r\n    this._program.version(`${pack.version}`)\r\n      .description(`${pack.description}`)\r\n      .usage(`<path>`)\r\n      .option('-C, --no-color', 'Uncolorize output')\r\n      .option('-e, --expression <exp>', 'Grep expression')\r\n      .action(path => {\r\n        return new Greplint(path, {verbose: this._program.verbose}).lint(this._program.expression)\r\n          .then(values => {\r\n            values.forEach(value => this.prettyprint(value))\r\n            return 0\r\n          }, this)\r\n          .catch(err => {\r\n            console.log(err)\r\n            return -1\r\n          })\r\n      })\r\n  }\r\n\r\n  prettyprint(found) {\r\n    const chalk = new Chalk.constructor({enabled: this._program.color ? true : false})\r\n    const filename = chalk.red(`${found.filename}:`)\r\n    const lineCol = chalk.green(`line ${found.lineNumber}, col ${found.index},`)\r\n    const source = chalk.white(`${found.value}`)\r\n\r\n    console.log(filename, lineCol, source)\r\n  }\r\n\r\n  run(args) {\r\n    if (args.length < 2) {\r\n      console.log('Few arguments')\r\n      return\r\n    }\r\n    if (args.length === 2) {\r\n      this._program.help()\r\n    }\r\n    this._program.parse(args)\r\n  }\r\n}\r\n"]}